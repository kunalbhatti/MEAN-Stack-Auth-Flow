{"version":3,"sources":["./src/app/auth_module/auth/login/login.component.ts","./src/app/auth_module/auth/login/login.component.html","./src/app/auth_module/auth/auth.component.ts","./src/app/auth_module/auth/auth.component.html","./src/app/auth_module/auth/reset-password/reset-password.component.ts","./src/app/auth_module/auth/reset-password/reset-password.component.html","./src/app/directives/checkPassword.directive.ts","./src/app/auth_module/auth/reset-password/update-password/update-password.component.ts","./src/app/auth_module/auth/reset-password/update-password/update-password.component.html","./src/app/auth_module/auth/register/activate/activate.component.ts","./src/app/auth_module/auth/register/activate/activate.component.html","./src/app/auth_module/auth/register/register.component.ts","./src/app/auth_module/auth/register/register.component.html","./src/app/auth_module/auth.module.ts","./src/app/auth_module/auth/register/account-created/account-created.component.ts","./src/app/auth_module/auth/register/account-created/account-created.component.html","./src/app/auth_module/auth/reset-password/get-link/get-link.component.ts","./src/app/auth_module/auth/reset-password/get-link/get-link.component.html","./src/app/auth_module/auth-routing.module.ts"],"names":[],"mappings":"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","file":"auth_module-auth-module.js","sourcesContent":["import {\n  Component,\n  OnDestroy,\n  OnInit\n} from '@angular/core';\nimport {\n  FormBuilder,\n  Validators\n} from '@angular/forms';\nimport {\n  Router\n} from '@angular/router';\n\nimport {\n  Subscription\n} from 'rxjs';\nimport {\n  first,\n  take\n} from 'rxjs/operators';\n\nimport {\n  SocialAuthService,\n} from 'angularx-social-login';\n\nimport {\n  AuthService\n} from './../../../services/auth.service';\n\nimport {\n  environment\n} from './../../../../environments/environment';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n\n  loginForm = this.fb.group({\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]]\n  })\n\n  errorMessage: string; // for displaying errors like invalid username/password etc\n  showRecaptcha: boolean; // recaptca is shown if the user enters password incorrectly 3 times. Set to false by default.\n\n  socialSub: Subscription; // subscription to socialAuthService. Unsubscribed when login component is destroyed.\n  provider: string; // provider represents google, facebook etc.\n\n  recaptchaSub: Subscription; // subscription to recaptcha. Unsubscribed when login component is destroyed\n  siteKey: string; // Recaptcha key received from google console. Site key is stored in the environment file.\n\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router, private socialAuthService: SocialAuthService) {}\n\n  ngOnInit(): void {\n    this.siteKey = environment.recaptchaSiteKey;\n    this.socialSub = this.socialAuthService.authState.subscribe(\n      user => {\n        if (this.provider === 'google' && user) {\n          this.authService.googleBackendSignIn(user.idToken, user.id).pipe(take(1)).subscribe(\n            (result: {\n              auth: boolean,\n              token: string,\n              message: string\n            }) => {\n\n              this.router.navigate(['/', 'app']);\n              localStorage.setItem('grocery-login-token', result.token);\n              localStorage.setItem('grocery-user-name', user.firstName + ' ' + user.lastName);\n              localStorage.setItem('grocery-user-photo', user.photoUrl);\n            }, error => {\n              this.errorMessage = error.message;\n            }\n          );\n\n        } else if (this.provider === 'facebook' && user) {\n          this.authService.facebookBackendSignIn({\n            email: user.email,\n            name: user.name,\n            id: user.id\n          }).pipe(take(1)).subscribe(\n            (result: {\n              auth: boolean,\n              token: string,\n              message: string\n            }) => {\n              this.router.navigate(['/', 'app']);\n              localStorage.setItem('grocery-login-token', result.token);\n              localStorage.setItem('grocery-user-name', user.firstName + ' ' + user.lastName);\n              localStorage.setItem('grocery-user-photo', user.photoUrl);\n\n            }, error => {\n              this.errorMessage = error.message;\n            }\n          );\n        }\n      }, error => {\n        console.log(error)\n        this.errorMessage = error.message;\n      }\n    )\n  }\n  // for local login strategy\n  onSubmit() {\n    this.authService.login(this.loginForm.value).pipe(first()).subscribe(\n      (result: {\n        auth: boolean,\n        token: string,\n        message: string,\n        name: string,\n        photoUrl: string\n      }) => {\n        if (!result.auth) {\n          this.errorMessage = result.message;\n          return;\n        }\n        this.router.navigate(['/', 'app']);\n        localStorage.setItem('grocery-login-token', result.token);\n        localStorage.setItem('grocery-user-name', result.name);\n        if (result.photoUrl) {\n          localStorage.setItem('grocery-user-photo', result.photoUrl);\n        }\n\n      }, (error: {\n        auth: boolean,\n        message: string,\n        recaptcha: boolean\n      }) => {\n        \n        this.errorMessage = error.message;\n        this.showRecaptcha = error.recaptcha;\n        \n        // We are keeping track of how many times the user inputs invalid password. \n        // After the third invalid attempt, error.recaptcha will return as true, and we will then require recaptcha validation\n        if (error.recaptcha) {\n          this.loginForm = this.fb.group({\n            email: ['', [Validators.email, Validators.required]],\n            password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]],\n            recaptcha: ['', Validators.required]\n          })\n        }\n      }\n    );\n  }\n\n  // for social login strategy\n  onSocialLogin(provider: string) {\n    this.provider = provider;\n    this.authService.socialLogin(provider);\n  }\n\n  // fired when user clicks the recaptha. Communicates with the backend to see if valid.\n  resolved(recaptchaToken: string) {\n    this.recaptchaSub = this.authService.validateCatpcha(recaptchaToken).subscribe(\n      (recaptcha: {\n        valid: boolean,\n        message: string\n      }) => {\n        if (recaptcha.valid) {\n\n          this.loginForm.controls['recaptcha'].setErrors(null);\n\n        } else {\n          // we need to set it to true, to indicate that the recaptcha is invalid and thus invalidating the whole form\n          this.loginForm.controls['recaptcha'].setErrors({\n            'incorrect': true\n          });\n        }\n      }, error => {\n        this.loginForm.controls['recaptcha'].setErrors({\n          'incorrect': true\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    try {\n      this.recaptchaSub.unsubscribe();\n    } catch (err) {}\n\n    try {\n      this.socialSub.unsubscribe();\n    } catch (err) {}\n\n  }\n}\n","<div class=\"row align-content-center justify-content-center bg-gradient h-100 overflow-auto\">\n  <div class=\"col-11 col-md-8 col-lg-6 col-xl-4 text-center reg-box\">\n    <div class=\"row text-light justify-content-center align-content-center\" style=\"background-color: #272b2e;\">\n      <div class=\"col-12 my-2\">\n        Login\n      </div>\n    </div>\n    <div class=\"row justify-content-center align-content-around my-2\">\n      <form class=\"form-row justify-content-center\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group col-11 col-sm-8\">\n          <label for=\"email\" class=\"text-warning\">Email</label>\n          <input type=\"text\" class=\"form-control\" id=\"email\" name=\"email\" aria-describedby=\"email\"\n            placeholder=\"Email Id\" formControlName=\"email\" required>\n        </div>\n\n        <div class=\"form-group col-11 col-sm-8\">\n          <label for=\"password\" class=\"text-warning\">Password</label>\n          <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" aria-describedby=\"password\"\n            placeholder=\"Password\" formControlName=\"password\" required>\n        </div>\n\n        <div class=\"col-11 mb-3 small text-danger\" *ngIf=\"errorMessage\">\n          *{{errorMessage}} \n        </div>\n\n        <div class=\"form-group col-11 col-sm-8 d-flex justify-content-center mb-2\" *ngIf=\"showRecaptcha\">\n          <re-captcha (resolved)=\"resolved($event)\" [siteKey]=\"siteKey\"></re-captcha>\n        </div>\n\n\n        <div class=\"col-11\">\n          <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"loginForm.invalid\">Login</button>\n        </div>\n      </form>  \n    </div>\n    <div class=\"row justify-content-center mb-2 pt-2 border-top\">\n   \n        <button class=\"btn social-btn rounded mr-3\" (click) = \"onSocialLogin('google')\"><img src=\"assets/google-btn.png\" class=\"img-fliud\" style=\"max-width: 25px; \" alt=\"Google Login\"></button>\n        <button class=\"btn social-btn rounded ml-3\" (click) = \"onSocialLogin('facebook')\"><img src=\"assets/facebook-btn.png\" class=\"img-fliud\" style=\"max-width: 25px; \" alt=\"Facebook Login\"></button>\n   \n    </div>\n    <div class=\"row justify-content-center\" style=\"background-color: #272b2e;\">\n      <button class=\"btn text-info\" [routerLink]=\"['/', 'auth', 'register']\"><small>Register</small></button>\n      <button class=\"btn text-info\" [routerLink]=\"['/', 'auth', 'reset-password', 'get-link']\"><small>Forgot\n          Password?</small></button>\n    </div>\n\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css']\n})\nexport class AuthComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<router-outlet></router-outlet>","import {\n  Component,\n  OnInit\n} from '@angular/core';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  constructor() {}\n\n  ngOnInit(): void {\n\n  }\n\n}\n","<router-outlet></router-outlet>","import {\r\n  AbstractControl,\r\n  ValidationErrors,\r\n  ValidatorFn\r\n} from \"@angular/forms\";\r\n\r\nexport const checkPasswordValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n\r\n  const password = control.get('password');\r\n  const confirmPassword = control.get('confirmPassword');\r\n  return (password.value !== confirmPassword.value) && (confirmPassword.dirty) ? {\r\n    invalidPassword: true\r\n  } : null;\r\n}\r\n","import {\n  Component,\n  OnInit\n} from '@angular/core';\n\nimport {\n  FormBuilder,\n  Validators\n} from '@angular/forms';\n\nimport {\n  ActivatedRoute\n} from '@angular/router';\n\nimport {\n  first\n} from 'rxjs/operators';\n\nimport {\n  checkPasswordValidator\n} from './../../../../directives/checkPassword.directive';\nimport {\n  AuthService\n} from './../../../../services/auth.service';\n\n@Component({\n  selector: 'app-update-password',\n  templateUrl: './update-password.component.html',\n  styleUrls: ['./update-password.component.css']\n})\nexport class UpdatePasswordComponent implements OnInit {\n\n  passwordResetForm = this.fb.group({\n    password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]]\n  }, {\n    validators: checkPasswordValidator // validate whether password and confirm password are the same.\n  });\n\n  success: boolean; // set to true if the password was successfully reset.\n  errorMessage: string;\n  linkExpired: boolean; // Link expires after use or if a new new link was issued after the current link.\n\n  displayPasswordInfo: boolean; // display help text when the user is typing the password.\n  token: string;\n\n  constructor(private authService: AuthService, private fb: FormBuilder, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.displayPasswordInfo = false;\n    this.success = false;\n\n    this.route.params.subscribe(\n      (params: {\n        token: string\n      }) => {\n        this.token = params.token;\n      }\n    );\n  }\n\n  onSubmit() {\n    this.authService.resetPassword(this.passwordResetForm.value.password, this.token).pipe(first()).subscribe(\n      (result: {\n        message: string\n      }) => {\n        this.errorMessage = result.message;\n        this.success = true;\n      },\n      (error: {\n        message: string,\n        expired: boolean // whether the reset link has expired or not\n      }) => {\n        this.errorMessage = error.message;\n        this.success = false;\n        this.linkExpired = error.expired;\n      }\n    );\n  }\n\n}\n","<div class=\"row align-content-center justify-content-center bg-gradient h-100 overflow-auto\">\n  <div class=\"col-11 col-md-8 col-lg-6 col-xl-4 text-center reg-box\">\n    <div class=\"row text-light justify-content-center align-content-center\" style=\"background-color: #272b2e;\">\n      <div class=\"col-12 my-2\">\n        Reset Password\n      </div>\n    </div>\n\n    <!-- Form to reset the password -->\n    <div class=\"row justify-content-center align-content-around my-2\" *ngIf=\"!success\">\n\n      <form class=\"form-row justify-content-center\" [formGroup]=\"passwordResetForm\" (ngSubmit)=\"onSubmit()\">\n\n        <div class=\"form-group col-11 col-sm-8\">\n          <label for=\"password1\" class=\"text-warning\">Password</label>\n          <div class=\"small text-info\" *ngIf=\"displayPasswordInfo\">Password can to be 6-12 charecters long.</div>\n          <input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" placeholder=\"Password\"\n            formControlName=\"password\" required minlength=\"6\" maxlength=\"12\" (focus)=\"displayPasswordInfo = true\"\n            (blur)=\"displayPasswordInfo = false;\">\n        </div>\n\n        <div class=\"form-group col-11 col-sm-8\">\n          <label for=\"exampleInputPassword1\" class=\"text-warning\">Confirm Password</label>\n          <input type=\"password\" class=\"form-control\" name=\"confirm_password\" id=\"confirm_password\"\n            placeholder=\"Confirm Password\" formControlName=\"confirmPassword\" required minlength=\"6\" maxlength=\"12\">\n          <div class=\"small text-danger\" *ngIf=\"passwordResetForm.errors?.invalidPassword\">\n            *Passwords do not match\n          </div>\n        </div>\n\n\n        <div class=\"col-11 mb-3 small text-danger\" *ngIf=\"errorMessage\">\n          *{{errorMessage}} <a class=\"text-info\" [routerLink] = \"['/', 'auth', 'reset-password', 'get-link']\" *ngIf=\"linkExpired\">Get a new link?</a>\n        </div>\n\n        <div class=\"col-11\"></div>\n        <button type=\"submit\" class=\"btn btn-primary\"\n          [disabled]=\"!((passwordResetForm.valid && !passwordResetForm.errors?.invalidPassword) && (passwordResetForm.touched && passwordResetForm.dirty))\">Reset\n          Password</button>\n      </form>\n\n    </div>\n\n    <!-- Displayed after success -->\n    <div class=\"row justify-content-center align-content-center reg-box text-light my-2\" *ngIf=\"success\">\n      <div class=\"col-12\">\n        {{errorMessage}}\n      </div>\n    </div>\n\n    <div class=\"row justify-content-center\" style=\"background-color: #272b2e;\">\n      <button class=\"btn text-info\" [routerLink]=\"['/', 'auth', 'login']\"><small>Login</small></button>\n      <button class=\"btn text-info\" [routerLink]=\"['/', 'auth', 'register']\"><small>Register</small></button>\n    </div>\n\n  </div>\n</div>\n","import {\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges\n} from '@angular/core';\n\nimport {\n  FormBuilder,\n  Validators\n} from '@angular/forms';\n\nimport {\n  ActivatedRoute\n} from '@angular/router';\n\nimport {\n  Subscription\n} from 'rxjs';\nimport {\n  first\n} from 'rxjs/operators';\n\nimport {\n  AuthService\n} from './../../../../services/auth.service';\n\nimport {\n  environment\n} from './../../../../../environments/environment';\n\n@Component({\n  selector: 'app-activate',\n  templateUrl: './activate.component.html',\n  styleUrls: ['./activate.component.css']\n})\nexport class ActivateComponent implements OnInit, OnChanges, OnDestroy {\n\n  // Activate component has option to send and resend activation link. If the email is empty, the user can input his email.\n  @Input() email: string;\n  @Input() created = false; // Display account created successfully when created is set to true.\n\n\n  resendForm = this.fb.group({\n    email: [{\n        value: '',\n        disabled: false\n      },\n      [Validators.required, Validators.email]\n    ],\n    recaptcha: [''] //, Validators.required\n  });\n\n  showForm = true; // show form to send link. \n  sent = false; // set to true after the email has been sent to the email.\n  activated = false; // set to true if the user is already active. \n\n  errorMessage: string;\n\n  recaptchaSub: Subscription;\n  siteKey: string;\n\n  constructor(private authService: AuthService, private fb: FormBuilder, private route: ActivatedRoute) {}\n\n\n  ngOnInit(): void {\n    this.email = null; // If the user has created a new account, this is will set from account-created component.\n    this.siteKey = environment.recaptchaSiteKey;\n  }\n\n  ngOnChanges(change: SimpleChanges) {\n\n    // if the user has created a new account, hide the form to resend link by default.\n    if (this.created) {\n      this.showForm = false;\n    }\n    this.resendForm = this.fb.group({\n      email: [{\n          value: '',\n          disabled: this.email !== null // Will happen only after the account was created.\n        },\n        [Validators.required, Validators.email]\n      ],\n      recaptcha: [''] //, Validators.required\n    });\n    this.resendForm.patchValue({\n      email: this.email\n    })\n  }\n\n  resolved(recaptchaToken: string) {\n    this.recaptchaSub = this.authService.validateCatpcha(recaptchaToken).subscribe(\n      (recaptcha: {\n        valid: boolean,\n        message: string\n      }) => {\n        if (recaptcha.valid) {\n          this.resendForm.controls['recaptcha'].setErrors(null);\n\n        } else {\n          this.resendForm.controls['recaptcha'].setErrors({\n            'incorrect': true\n          });\n        }\n      }, error => {\n        this.resendForm.controls['recaptcha'].setErrors({\n          'incorrect': true\n        });\n        this.errorMessage = error;\n      }\n    );\n  }\n\n  onSubmit() {\n    this.authService.resendActivationMail(this.resendForm.controls['email'].value).pipe(first()).subscribe(\n      (result: {\n        activated: boolean,\n        message: string\n      }) => {\n        this.sent = true;\n        this.showForm = false;\n        this.created = false;\n        if (result.activated) {\n          this.activated = true;\n        }\n      }, error => {\n        this.errorMessage = error;\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    try {\n      this.recaptchaSub.unsubscribe();\n    } catch (err) {}\n  }\n\n}\n","<div class=\"row align-content-center justify-content-center bg-gradient h-100\">\n  <div class=\"text-center col-11 col-md-8 col-lg-6 col-xl-4 reg-box\">\n\n    <div class=\"row text-light justify-content-center align-content-center\" style=\"background-color: #272b2e;\">\n      <div class=\"col-12 my-2\" *ngIf=\"created\">\n        Account Created\n      </div>\n      <div class=\"col-12 my-2\" *ngIf=\"!created\">\n        Activation Link\n      </div>\n    </div>\n\n    <div class=\"row justify-content-center align-content-center reg-box text-light my-2\">\n\n      <div class=\"col-12\">\n        <!-- Displayed if a new account was created. -->\n        <div class=\"row my-2 justify-content-center\" *ngIf=\"created\">\n          Account Created Successfully!!\n        </div>\n\n        <!-- Displayed if the user ser was just created or after the email has been sent successfully -->\n        <div class=\"row my-2 text-light justify-content-center\" *ngIf=\"(sent && !activated) || created\">\n          An email has been sent to the registered email address. Please click on the link\n          to activate your account.\n        </div>\n\n        <!-- Displayed if the user is already active -->\n        <div class=\"row my-2 text-light justify-content-center\" *ngIf=\"activated\">\n          Account is already active.\n        </div>\n        \n        <!-- Displayed after the email has been sent successfully to give option to send another email -->\n        <div class=\"row border-top \" *ngIf=\"(sent && !activated) || created\">\n          <div class=\"col-12 pt-1\" (click)=\"showForm = !showForm\" [ngClass]=\"{'text-right': showForm}\">\n            <small class=\"text-warning\">{{showForm ? '' : 'Did not receive email?'}}\n              <span class=\"btn-link pointer\" [ngClass]=\"{'text-danger': showForm, 'text-info': !showForm}\">\n                {{showForm ? 'Cancel [x]' : 'Send Again'}}\n              </span>\n            </small>\n          </div>\n        </div>\n\n        <form class=\"form-row justify-content-center\" [formGroup]=\"resendForm\" (ngSubmit)=\"onSubmit()\" *ngIf=\"showForm\">\n          <label for=\"email\" class=\"text-warning col-12 text-center\">Registered Email</label>\n          <input type=\"text\" class=\"form-control col-8\" id=\"email\" name=\"email\" aria-describedby=\"email\"\n            placeholder=\"Email\" formControlName=\"email\">\n          <div class=\"form-group col-11 col-sm-8 d-flex justify-content-center mt-4 mb-3\">\n            <re-captcha (resolved)=\"resolved($event)\" [siteKey]=\"siteKey\"></re-captcha>\n          </div>\n\n          <div class=\"col-12 small text-danger\" *ngIf=\"errorMessage\">\n            *{{errorMessage}}\n          </div>\n\n          <div class=\"col-12 text-center my-3\">\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"resendForm.invalid\">Send</button>\n          </div>\n        </form>\n\n      </div>\n    </div>\n\n\n    <div class=\"row justify-content-center\" style=\"background-color: #272b2e;\">\n      <button class=\"btn text-info\" [routerLink]=\"['/', 'auth', 'login']\"><small>Login</small></button>\n      <button class=\"btn text-info\" [routerLink]=\"['/', 'auth', 'register']\"><small>Register</small></button>\n    </div>\n  </div>\n</div>\n","import {\n  Component,\n  OnDestroy,\n  OnInit\n} from '@angular/core';\nimport {\n  FormBuilder,\n  Validators,\n} from '@angular/forms';\nimport {\n  Router\n} from '@angular/router';\nimport {\n  Subscription\n} from 'rxjs';\nimport {\n  first\n} from 'rxjs/operators';\n\nimport {\n  AuthService\n} from './../../../services/auth.service';\n\nimport {\n  checkPasswordValidator\n} from './../../../directives/checkPassword.directive';\n\nimport {\n  environment\n} from './../../../../environments/environment';\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n\n  errorMessage: boolean;\n\n  recaptchaSub: Subscription;\n  siteKey: string;\n\n  registrationForm = this.fb.group({\n    name: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(15)]],\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]],\n    recaptcha: [''] // Validators.required\n  }, {\n    validators: checkPasswordValidator // validates if the password and confirm password are same.\n  });\n\n  // display help text when the user fills these fields.\n  displayPasswordInfo: boolean;\n  displayNameInfo: boolean;\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {}\n\n  ngOnInit(): void {\n    this.displayPasswordInfo = false;\n    this.displayNameInfo = false;\n    this.siteKey = environment.recaptchaSiteKey;\n  }\n\n  onSubmit() {\n    this.authService.register(this.registrationForm.value).pipe(first()).subscribe(\n      (account: {\n        created: boolean,\n        token: string\n      }) => {\n        if (!account.created) {\n          alert('Account could not be created due to some internal error. Please try again later');\n          return;\n        }\n\n        this.router.navigate(['/', 'auth', 'account-created', this.registrationForm.controls['email'].value]);\n\n      }, error => {\n        this.errorMessage = error;\n      }\n    )\n  }\n\n  resolved(recaptchaToken: string) {\n    this.recaptchaSub = this.authService.validateCatpcha(recaptchaToken).subscribe(\n      (recaptcha: {\n        valid: boolean,\n        message: string\n      }) => {\n        if (recaptcha.valid) {\n          this.registrationForm.controls['recaptcha'].setErrors(null);\n\n        } else {\n          this.registrationForm.controls['recaptcha'].setErrors({\n            'incorrect': true\n          });\n        }\n      }, error => {\n        this.registrationForm.controls['recaptcha'].setErrors({\n          'incorrect': true\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    try {\n      this.recaptchaSub.unsubscribe();\n    } catch (err) {}\n  }\n}\n","<div class=\"row align-content-center justify-content-center bg-gradient h-100 overflow-auto\">\n  <div class=\"col-11 col-md-8 col-lg-6 col-xl-4 text-center reg-box\">\n    <div class=\"row text-light justify-content-center align-content-center\" style=\"background-color: #272b2e;\">\n      <div class=\"col-12 my-2\">\n        Register\n      </div>\n    </div>\n    <div class=\"row justify-content-center align-content-around mt-2\">\n\n      <form class=\"form-row justify-content-center\" [formGroup]=\"registrationForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group col-11 col-sm-8\">\n          <label for=\"name\" class=\"text-warning\">Name</label>\n          <div class=\"small text-info\" *ngIf=\"displayNameInfo\">Name can to be 3-15 charecters long.</div>\n          <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" aria-describedby=\"fullName\"\n            placeholder=\"Full Name\" formControlName=\"name\" required minlength=\"3\" maxlength='50'\n            (focus)=\"displayNameInfo = true\" (blur)=\"displayNameInfo = false;\">\n        </div>\n\n        <div class=\"form-group col-11 col-sm-8\">\n          <label for=\"email\" class=\"text-warning\">Email</label>\n          <input type=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"email\" placeholder=\"Email Id\"\n            formControlName=\"email\" email required>\n        </div>\n\n        <div class=\"form-group col-11 col-sm-8\">\n          <label for=\"password1\" class=\"text-warning\">Password</label>\n          <div class=\"small text-info\" *ngIf=\"displayPasswordInfo\">Password can to be 6-12 charecters long.</div>\n          <input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" placeholder=\"Password\"\n            formControlName=\"password\" required minlength=\"6\" maxlength=\"12\" (focus)=\"displayPasswordInfo = true\"\n            (blur)=\"displayPasswordInfo = false;\">\n        </div>\n\n        <div class=\"form-group col-11 col-sm-8\">\n          <label for=\"exampleInputPassword1\" class=\"text-warning\">Confirm Password</label>\n          <input type=\"password\" class=\"form-control\" name=\"confirm_password\" id=\"confirm_password\"\n            placeholder=\"Confirm Password\" formControlName=\"confirmPassword\" required minlength=\"6\" maxlength=\"12\">\n          <div class=\"small text-danger\" *ngIf=\"registrationForm.errors?.invalidPassword\">\n            *Passwords do not match\n          </div>\n        </div>\n\n        <div class=\"form-group col-11 col-sm-8 d-flex justify-content-center mt-4 mb-2\">\n          <re-captcha (resolved)=\"resolved($event)\" [siteKey]=\"siteKey\"></re-captcha>\n        </div>\n\n        <div class=\"col-11 mb-2 small text-danger\" *ngIf=\"errorMessage\">\n          *{{errorMessage}}\n        </div>\n\n        <div class=\"col-11\"></div>\n        <button type=\"submit\" class=\"btn btn-primary\"\n          [disabled]=\"!((registrationForm.valid && !registrationForm.errors?.invalidPassword) && (registrationForm.touched && registrationForm.dirty))\">Register</button>\n      </form>\n      <div class=\"col-12 text-right\">\n        <button class=\"btn text-warning\" [routerLink]=\"['/', 'auth', 'get-activation-link']\"><small>Lost\n            Activation Link ?</small></button>\n      </div>\n    </div>\n    <div class=\"row justify-content-center\" style=\"background-color: #272b2e;\">\n      <button class=\"btn text-info\" [routerLink]=\"['/', 'auth', 'login']\"><small>Login</small></button>\n      <button class=\"btn text-info\" [routerLink]=\"['/', 'auth', 'reset-password', 'get-link']\"><small>Forgot Password?</small></button>\n    </div>\n\n  </div>\n</div>\n","import {\r\n  NgModule\r\n} from \"@angular/core\";\r\n\r\nimport {\r\n  CommonModule\r\n} from \"@angular/common\";\r\nimport {\r\n  ReactiveFormsModule\r\n} from \"@angular/forms\";\r\n\r\nimport {\r\n  AuthRoutingModule\r\n} from './auth-routing.module';\r\nimport {\r\n  RecaptchaFormsModule,\r\n  RecaptchaModule\r\n} from \"ng-recaptcha\";\r\n\r\nimport {\r\n  AuthComponent\r\n} from './auth/auth.component';\r\nimport {\r\n  RegisterComponent\r\n} from './auth/register/register.component';\r\n\r\nimport {\r\n  LoginComponent\r\n} from './auth/login/login.component';\r\nimport {\r\n  ActivateComponent\r\n} from './auth/register/activate/activate.component';\r\n\r\nimport {\r\n  AccountCreatedComponent\r\n} from './auth/register/account-created/account-created.component';\r\nimport {\r\n  ResetPasswordComponent\r\n} from './auth/reset-password/reset-password.component';\r\nimport {\r\n  GetLinkComponent\r\n} from './auth/reset-password/get-link/get-link.component';\r\nimport {\r\n  UpdatePasswordComponent\r\n} from './auth/reset-password/update-password/update-password.component';\r\n\r\n@NgModule({\r\n  declarations: [AuthComponent, RegisterComponent, LoginComponent, ActivateComponent, AccountCreatedComponent, ResetPasswordComponent, GetLinkComponent, UpdatePasswordComponent],\r\n  imports: [CommonModule, ReactiveFormsModule, AuthRoutingModule, RecaptchaFormsModule, RecaptchaModule],\r\n  exports: []\r\n})\r\n\r\nexport class AuthModule {\r\n\r\n}\r\n","import {\n  Component,\n  OnInit\n} from '@angular/core';\n\nimport {\n  ActivatedRoute\n} from '@angular/router';\n\n@Component({\n  selector: 'app-account-created',\n  templateUrl: './account-created.component.html',\n  styleUrls: ['./account-created.component.css']\n})\nexport class AccountCreatedComponent implements OnInit {\n\n  email: string;\n\n  constructor(private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe(\n      params => {\n        this.email = params.email;\n      }\n    )\n  }\n \n}\n","<!-- app-activate component is reused. We are setting created to true to show the account created message -->\n<app-activate [email]=\"email\" [created]=\"true\"></app-activate>\n","import {\n  Component,\n  OnDestroy,\n  OnInit\n} from '@angular/core';\nimport {\n  FormBuilder,\n  Validators\n} from '@angular/forms';\nimport {\n  Subscription\n} from 'rxjs';\nimport {\n  first\n} from 'rxjs/operators';\n\nimport {\n  AuthService\n} from './../../../../services/auth.service';\n\nimport {\n  environment\n} from './../../../../../environments/environment';\n\n@Component({\n  selector: 'app-get-link',\n  templateUrl: './get-link.component.html',\n  styleUrls: ['./get-link.component.css']\n})\nexport class GetLinkComponent implements OnInit, OnDestroy {\n\n  resetPasswordForm = this.fb.group({\n    email: ['', [Validators.required, Validators.email]],\n    recaptcha: [''] //, Validators.required\n  });\n\n  errorMessage: string;\n  sent: boolean; // set to true if email sent successfully\n  \n  showForm: boolean;\n\n  recaptchaSub: Subscription;\n  siteKey: string;\n\n  constructor(private fb: FormBuilder, private authService: AuthService) {}\n\n  ngOnInit(): void {\n    this.showForm = false;\n    this.sent = false; // set to true after the request has been sent\n    this.siteKey = environment.recaptchaSiteKey;\n  }\n\n  onSubmit() {\n    this.authService.getResetLink(this.resetPasswordForm.value.email).pipe(first()).subscribe(\n      (result: {\n        message: string\n      }) => {\n        this.errorMessage = result.message;\n        this.sent = true;\n      }, (error: {\n        message: string\n      }) => {\n        this.errorMessage = error.message;\n      }\n    );\n  }\n\n  resolved(recaptchaToken: string) {\n    this.recaptchaSub = this.authService.validateCatpcha(recaptchaToken).subscribe(\n      (recaptcha: {\n        valid: boolean,\n        message: string\n      }) => {\n        if (recaptcha.valid) {\n\n          this.resetPasswordForm.controls['recaptcha'].setErrors(null);\n\n        } else {\n          this.resetPasswordForm.controls['recaptcha'].setErrors({\n            'incorrect': true\n          });\n        }\n      }, error => {\n        this.resetPasswordForm.controls['recaptcha'].setErrors({\n          'incorrect': true\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    try {\n      this.recaptchaSub.unsubscribe();\n    } catch (err) {}\n  }\n\n}\n","<div class=\"row align-content-center justify-content-center bg-gradient h-100\">\n  <div class=\"text-center col-11 col-md-8 col-lg-6 col-xl-4 reg-box\">\n\n    <div class=\"row text-light justify-content-center align-content-center\" style=\"background-color: #272b2e;\">\n      <div class=\"col-12 my-2\">\n        Reset Password\n      </div>\n    </div>\n\n    <!-- Form to get the reset link -->\n    <div class=\"row justify-content-center align-content-center reg-box text-light my-2\" *ngIf=\"!sent\">\n\n      <div class=\"col-12\">\n\n        <form class=\"form-row justify-content-center\" [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"onSubmit()\">\n          <label for=\"email\" class=\"text-warning col-12 text-center\">Registered Email</label>\n          <input type=\"text\" class=\"form-control col-8\" id=\"email\" name=\"email\" aria-describedby=\"email\"\n            placeholder=\"Email\" formControlName=\"email\">\n          <div class=\"form-group col-11 col-sm-8 d-flex justify-content-center mt-4 mb-3\">\n            <re-captcha (resolved)=\"resolved($event)\" [siteKey]=\"siteKey\"></re-captcha>\n          </div>\n\n          <div class=\"col-12 small text-danger\" *ngIf=\"errorMessage\"\n            [ngClass]=\"{'text-danger': !sent, 'text-success': sent}\">\n            *{{errorMessage}}\n          </div>\n\n          <div class=\"col-12 text-center my-3\">\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"resetPasswordForm.invalid\">Send</button>\n          </div>\n        </form>\n\n      </div>\n    </div>\n\n    <!-- Displayed if the request has been made successfully -->\n    <div class=\"row justify-content-center align-content-center reg-box text-light my-2\" *ngIf=\"sent\">\n      <div class=\"col-12\">\n        {{errorMessage}} <!--errorMessage is acting as a normal message. Used this to avoid using another variable-->\n      </div>\n      <div class=\"col-12 border-top my-2\">\n        <div class=\"col-12 pt-1\" (click)=\"showForm = false; sent= false; errorMessage = ''\">\n          <small class=\"text-warning\">Did not receive email?\n            <span class=\"btn-link pointer\" [ngClass]=\"{'text-danger': showForm, 'text-info': !showForm}\">\n              {{showForm ? 'Cancel [x]' : 'Send Again'}}\n            </span>\n          </small>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row justify-content-center\" style=\"background-color: #272b2e;\">\n      <button class=\"btn text-info\" [routerLink]=\"['/', 'auth', 'login']\"><small>Login</small></button>\n      <button class=\"btn text-info\" [routerLink]=\"['/', 'auth', 'register']\"><small>Register</small></button>\n    </div>\n  </div>\n</div>\n","import {\r\n  NgModule\r\n} from \"@angular/core\";\r\nimport {\r\n  RouterModule,\r\n  Routes\r\n} from '@angular/router'\r\n\r\n\r\nimport {\r\n  AuthComponent\r\n} from './auth/auth.component';\r\nimport {\r\n  LoginComponent\r\n} from \"./auth/login/login.component\";\r\nimport {\r\n  AccountCreatedComponent\r\n} from \"./auth/register/account-created/account-created.component\";\r\nimport {\r\n  ActivateComponent\r\n} from \"./auth/register/activate/activate.component\";\r\nimport {\r\n  RegisterComponent\r\n} from \"./auth/register/register.component\";\r\nimport {\r\n  GetLinkComponent\r\n} from \"./auth/reset-password/get-link/get-link.component\";\r\nimport {\r\n  ResetPasswordComponent\r\n} from \"./auth/reset-password/reset-password.component\";\r\nimport {\r\n  UpdatePasswordComponent\r\n} from \"./auth/reset-password/update-password/update-password.component\";\r\n\r\n\r\nconst routes: Routes = [{\r\n  path: '',\r\n  component: AuthComponent,\r\n  children: [{\r\n      path: 'register',\r\n      component: RegisterComponent\r\n    }, {\r\n      path: 'login',\r\n      component: LoginComponent\r\n    },\r\n    {\r\n      path: 'reset-password',\r\n      component: ResetPasswordComponent,\r\n      children: [{\r\n          path: 'get-link',\r\n          component: GetLinkComponent\r\n        },\r\n        {\r\n          path: 'update-password/:token',\r\n          component: UpdatePasswordComponent\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      path: 'account-created/:email',\r\n      component: AccountCreatedComponent\r\n    }, {\r\n      path: 'get-activation-link',\r\n      component: ActivateComponent,\r\n    },\r\n  ]\r\n}];\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}